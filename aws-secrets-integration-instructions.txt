# How to Store and Retrieve DB Credentials from AWS Secrets Manager in Kubernetes with Argo CD and Helm

## 1. Store DB Credentials in AWS Secrets Manager
- Go to AWS Secrets Manager in the AWS Console.
- Click “Store a new secret”.
- Choose “Other type of secret”.
- Add key-value pairs, e.g.:
  - `username`: your_db_user
  - `password`: your_db_password
- Name the secret, e.g., `my-db-secret`.
- Save the secret.

## 2. Install External Secrets Operator in Kubernetes
```sh
helm repo add external-secrets https://charts.external-secrets.io
helm repo update
helm install external-secrets external-secrets/external-secrets -n external-secrets --create-namespace
```

## 3. Create a Kubernetes ServiceAccount with IAM Role (IRSA)
- Create an IAM policy in AWS with permissions to access your secret:
```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "arn:aws:secretsmanager:REGION:ACCOUNT_ID:secret:my-db-secret*"
    }
  ]
}
```
- Create the policy:
```sh
aws iam create-policy --policy-name ExternalSecretsPolicy --policy-document file://secretsmanager-policy.json
```
- Create an IAM role and associate it with your EKS OIDC provider and the ServiceAccount:
```sh
eksctl create iamserviceaccount \
  --name external-secrets-sa \
  --namespace demo \
  --cluster <your-cluster-name> \
  --attach-policy-arn arn:aws:iam::<ACCOUNT_ID>:policy/ExternalSecretsPolicy \
  --approve
```

## 4. Create the SecretStore Resource
```yaml
apiVersion: external-secrets.io/v1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: demo
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1 # change to your AWS region
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa
```
Apply with:
```sh
kubectl apply -f secretstore.yaml
```

## 5. Create the ExternalSecret Resource
```yaml
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: db-credentials
  namespace: demo
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: db-credentials
    creationPolicy: Owner
  data:
    - secretKey: username
      remoteRef:
        key: my-db-secret
        property: username
    - secretKey: password
      remoteRef:
        key: my-db-secret
        property: password
```
Apply with:
```sh
kubectl apply -f externalsecret.yaml
```

## 6. Reference the Synced Secret in Your Helm Chart
In your `values.yaml` or Helm templates:
```yaml
db:
  usernameSecret: db-credentials
  passwordSecret: db-credentials
```
In your deployment manifest:
```yaml
env:
  - name: DB_USERNAME
    valueFrom:
      secretKeyRef:
        name: db-credentials
        key: username
  - name: DB_PASSWORD
    valueFrom:
      secretKeyRef:
        name: db-credentials
        key: password
```

## 7. Deploy Your Application with Argo CD
- Make sure your Argo CD Application manifest references the correct namespace and values file.
- Argo CD will deploy your app, and your app will use the credentials from the Kubernetes secret, which is synced from AWS Secrets Manager.

---

**Summary:**
- Store secrets in AWS.
- Install External Secrets Operator.
- Set up IAM and ServiceAccount (IRSA).
- Create SecretStore and ExternalSecret.
- Reference the secret in your app via Helm.
- Deploy with Argo CD.
